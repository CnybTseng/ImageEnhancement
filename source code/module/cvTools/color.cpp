#include <cstdio>
#include <cstdlib>
#include <cassert>
#ifdef __linux__
#include <arm_neon.h>
#endif
#include "pthread.h"
#include "color.h"

/**
 * \typedef struct channel_split_t
 * \brief Data structure for the channel split parameters.
 */
typedef struct {
	uint8_t *data;		// RGB image data.
	int32_t channel;	// Channel ID.
	int32_t npixels;	// Number of pixels.
	uint8_t *cdata;		// Channel image data.
}channel_split_t;

//-----------------------------------------------------------------------------------------
// YV12 to BGR24 check table.
//-----------------------------------------------------------------------------------------
static int v_tab1[256] = { -180, -179, -177, -176, -174, -173, -172, -170, -169, -167, -166, -165, -163, -162, -160, -159, -158, -156, -155, -153, -152, -151, -149, -148, -146, -145, -144, -142, -141, -139, -138, -137,  -135, -134, -132, -131, -130, -128, -127, -125, -124, -123, -121, -120, -118, -117, -115, -114, -113, -111, -110, -108, -107, -106, -104, -103, -101, -100, -99, -97, -96, -94, -93, -92, -90,  -89, -87, -86, -85, -83, -82, -80, -79, -78, -76, -75, -73, -72, -71, -69, -68, -66, -65, -64,-62, -61, -59, -58, -57, -55, -54, -52, -51, -50, -48, -47, -45, -44, -43, -41, -40, -38, -37,  -36, -34, -33, -31, -30, -29, -27, -26, -24, -23, -22, -20, -19, -17, -16, -15, -13, -12, -10, -9, -8, -6, -5, -3, -2, 0, 1, 2, 4, 5, 7, 8, 9, 11, 12, 14, 15, 16, 18, 19, 21, 22, 23, 25, 26, 28, 29, 30, 32, 33, 35, 36, 37, 39, 40, 42, 43, 44, 46, 47, 49, 50, 51, 53, 54, 56, 57, 58, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 74, 75, 77, 78, 79, 81, 82, 84, 85, 86, 88, 89, 91, 92, 93, 95, 96, 98, 99, 100, 102, 103, 105, 106, 107, 109, 110, 112, 113, 114, 116, 117, 119, 120, 122, 123, 124, 126, 127, 129, 130, 131, 133, 134, 136, 137, 138, 140, 141, 143, 144, 145, 147, 148,  150, 151, 152, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 168, 169, 171, 172, 173, 175, 176, 178 };
static int v_tab2[256] = { -92, -91, -91, -90, -89, -88, -88, -87, -86, -86, -85, -84, -83, -83, -82, -81, -81, -80, -79, -78, -78, -77, -76, -76, -75, -74, -73, -73, -72, -71, -71, -70, -69, -68, -68, -67, -66, -66, -65, -64, -63, -63, -62, -61, -61, -60, -59, -58, -58, -57, -56, -56, -55, -54, -53, -53, -52, -51, -51, -50, -49, -48, -48, -47, -46, -46, -45, -44, -43, -43, -42, -41, -41, -40, -39, -38, -38, -37, -36, -36, -35, -34, -33, -33, -32, -31, -31, -30, -29, -28, -28, -27, -26, -26, -25, -24, -23, -23, -22, -21, -21, -20, -19, -18, -18, -17, -16, -16, -15, -14, -13, -13, -12, -11, -11, -10, -9, -8, -8, -7, -6, -6, -5, -4, -3, -3, -2, -1, 0, 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 7, 8, 9, 10, 10, 11, 12, 12, 13, 14, 15, 15, 16, 17, 17, 18, 19, 20, 20, 21, 22, 22, 23, 24, 25, 25, 26, 27, 27, 28, 29, 30, 30, 31, 32, 32, 33, 34, 35, 35, 36, 37, 37, 38, 39, 40, 40, 41, 42, 42, 43, 44, 45, 45, 46, 47, 47, 48, 49, 50, 50, 51, 52, 52, 53, 54, 55, 55, 56, 57, 57, 58, 59, 60, 60, 61, 62, 62, 63, 64, 65, 65, 66, 67, 67, 68, 69, 70, 70, 71, 72, 72, 73, 74, 75, 75, 76, 77, 77, 78, 79, 80, 80, 81, 82, 82, 83, 84, 85, 85, 86, 87, 87, 88, 89, 90, 90 };
static int u_tab1[256] = { -44, -44, -44, -43, -43, -43, -42, -42, -42, -41, -41, -41, -40, -40, -40, -39, -39, -39, -38, -38, -38, -37, -37, -37, -36, -36, -36, -35, -35, -35, -34, -34, -33, -33, -33, -32, -32, -32, -31, -31, -31, -30, -30, -30, -29, -29, -29, -28, -28, -28, -27, -27, -27, -26, -26, -26, -25, -25, -25, -24, -24, -24, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, -12, -12, -11, -11, -11, -10, -10, -10, -9, -9, -9, -8, -8, -8, -7, -7, -7, -6, -6, -6, -5, -5, -5, -4, -4, -4, -3, -3, -3, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8, 8, 8, 9, 9, 9, 10, 10, 11, 11, 11, 12, 12, 12, 13, 13, 13, 14, 14, 14, 15, 15, 15, 16, 16, 16, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33, 34, 34, 34, 35, 35, 35, 36, 36, 36, 37, 37, 37, 38, 38, 38, 39, 39, 39, 40, 40, 40, 41, 41, 41, 42, 42, 42, 43, 43 };
static int u_tab2[256] = { -227, -226, -224, -222, -220, -219, -217, -215, -213, -212, -210, -208, -206, -204, -203, -201, -199, -197, -196, -194, -192, -190, -188, -187, -185, -183, -181, -180, -178, -176, -174, -173, -171, -169, -167, -165, -164, -162, -160, -158, -157, -155, -153, -151, -149, -148, -146, -144, -142, -141, -139, -137, -135, -134, -132, -130, -128, -126, -125, -123, -121, -119, -118, -116, -114, -112, -110, -109, -107, -105, -103, -102, -100, -98, -96, -94, -93, -91, -89, -87, -86, -84, -82, -80, -79, -77, -75, -73, -71, -70, -68, -66, -64, -63, -61, -59, -57, -55, -54, -52, -50, -48, -47, -45, -43, -41, -40, -38, -36, -34, -32, -31, -29, -27, -25, -24, -22, -20, -18, -16, -15, -13, -11, -9, -8, -6, -4, -2, 0, 1, 3, 5, 7, 8, 10, 12, 14, 15, 17, 19, 21, 23, 24, 26, 28, 30, 31, 33, 35, 37, 39, 40, 42, 44, 46, 47, 49, 51, 53, 54, 56, 58, 60, 62, 63, 65, 67, 69, 70, 72, 74, 76, 78, 79, 81, 83, 85, 86, 88, 90, 92, 93, 95, 97, 99, 101, 102, 104, 106, 108, 109, 111, 113, 115, 117, 118, 120, 122, 124, 125, 127, 129, 131, 133, 134, 136, 138, 140, 141, 143, 145, 147, 148, 150, 152, 154, 156, 157, 159, 161, 163, 164, 166, 168, 170, 172, 173, 175, 177, 179, 180, 182, 184, 186, 187, 189, 191, 193, 195, 196, 198, 200, 202, 203, 205, 207, 209, 211, 212, 214, 216, 218, 219, 221, 223, 225 };

//-----------------------------------------------------------------------------------------
// Channel split thread.
//-----------------------------------------------------------------------------------------
void *channel_split_thread(
	void *param
)	{
	channel_split_t *csplit = (channel_split_t *)param;
	const int32_t bytes_per_pixel = 3;
	const int32_t npixels = csplit->npixels;
	for (int32_t i = 0; i < npixels; i++) {
		csplit->cdata[i] = csplit->data[i * bytes_per_pixel + csplit->channel];
	}
	return (void *)(0);
}

//-----------------------------------------------------------------------------------------
// RGB channel split.
//-----------------------------------------------------------------------------------------
void channel_split(
	uint8_t *rgb_image,
	int32_t width,
	int32_t height,
	uint8_t *red_image,
	uint8_t *green_image,
	uint8_t *blue_image
)	{
	assert(rgb_image);
	assert(red_image);
	assert(green_image);
	assert(blue_image);
	
	pthread_t tid[3];
	channel_split_t csplit[3];
	const int32_t nchannels = 3;
	uint8_t *cdata[3] = {red_image, green_image, blue_image};
	
	for (int32_t c = 0; c < nchannels; c++) {
		csplit[c].data = rgb_image;
		csplit[c].channel = c;
		csplit[c].npixels = width * height;
		csplit[c].cdata = cdata[c];
	}
		
	for (int32_t c = 0; c < nchannels; c++) {
		int32_t ret = pthread_create(&tid[c], NULL, channel_split_thread, &csplit[c]);
		if (0 != ret) {
			printf("Create channel split thread[%d] fail!\n", c);
			exit(-1);
		}
	}
	
	for (int32_t c = 0; c < nchannels; c++) {
		pthread_join(tid[c], NULL);
	}
}

//-----------------------------------------------------------------------------------------
// Neon version color channel split.
//-----------------------------------------------------------------------------------------
void neon_channel_split(
	uint8_t *bgr_image,
	int32_t width,
	int32_t height,
	uint8_t *red_image,
	uint8_t *green_image,
	uint8_t *blue_image
)	{
	assert(bgr_image);
	assert(red_image);
	assert(green_image);
	assert(blue_image);
#ifdef _WIN32
	channel_split(bgr_image, width, height, red_image, green_image, blue_image);
#elif __linux__
	printf("use neon.\n");
	const int32_t npixels_per_loop = 8;
	for (int32_t y = 0; y < height; y++) {
		for (int32_t x = 0; x < width; x += npixels_per_loop) {
			uint8x8x3_t bgr_data = vld3_u8(bgr_image);
			vst1_u8(red_image, bgr_data.val[2]);
			vst1_u8(green_image, bgr_data.val[1]);
			vst1_u8(blue_image, bgr_data.val[0]);
			bgr_image += npixels_per_loop * 3;
			red_image += npixels_per_loop;
			green_image += npixels_per_loop;
			blue_image += npixels_per_loop;
		}
	}
#else
#	error "Unknown compiler"
#endif
}

//-----------------------------------------------------------------------------------------
// Convert YV12 to BGR24 image array.
//-----------------------------------------------------------------------------------------
void yv12_2bgr24(
	uint8_t* yuv_image,
	uint8_t* blue_image,
	uint8_t* green_image,
	uint8_t* red_image,
	int32_t width,
	int32_t height
)	{
    assert(yuv_image);
	assert(blue_image);
	assert(green_image);
	assert(red_image);
	assert(width > 0);
	assert(height > 0);
	
    const long len = width * height;
    uint8_t *y_data = yuv_image;
    uint8_t *v_data = &y_data[len];
    uint8_t *u_data = &v_data[len >> 2];

    int32_t bgr[3];
    int32_t y_idx, u_idx, v_idx, idx;
    int32_t red_bias, green_bias, blue_bias;
    for (int32_t y = 0; y < height; y++) {
        for (int32_t x = 0; x < width; x++) {
            y_idx = y * width + x;
            v_idx = (y/2) * (width/2) + (x/2);
            u_idx = v_idx;
            
            red_bias = v_tab1[v_data[v_idx]];
            green_bias = u_tab1[u_data[u_idx]] + v_tab2[v_data[v_idx]];
            blue_bias = u_tab2[u_data[u_idx]];

            bgr[0] = y_data[y_idx] + blue_bias;    
            bgr[1] = y_data[y_idx] - green_bias;
            bgr[2] = y_data[y_idx] + red_bias;

			idx = y * width + x;
			if (bgr[0] >= 0 && bgr[0] <= 255) {
				blue_image[idx] = bgr[0];
			} else {
				blue_image[idx] = (bgr[0] < 0) ? 0 : 255;
			}
			
			if (bgr[1] >= 0 && bgr[1] <= 255) {
				green_image[idx] = bgr[1];
			} else {
				green_image[idx] = (bgr[1] < 0) ? 0 : 255;
			}
			
			if (bgr[2] >= 0 && bgr[2] <= 255) {
				red_image[idx] = bgr[2];
			} else {
				red_image[idx] = (bgr[2] < 0) ? 0 : 255;
			}
        }
    }
}
